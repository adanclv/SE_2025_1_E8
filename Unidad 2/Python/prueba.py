import numpy as np
import pandas as pd

data = [
    "511,497,495,502,498,500;506,502,493,498,496,495;598,587,579,607,602,591;448,459,453,466,461,478;498,503,497,506,503,514;494,498,494,507,495,507",
    "510,498,497,504,500,499;511,503,495,502,501,496;598,591,580,610,605,593;451,461,455,468,463,481;499,503,501,511,506,515;496,501,497,509,496,509",
    "512,499,496,505,499,500;508,506,496,500,500,497;601,589,581,608,604,596;451,461,453,470,466,478;500,503,500,511,505,515;497,501,494,507,495,511",
    "511,501,498,507,500,503;510,504,494,501,499,500;602,592,579,612,606,594;452,459,454,470,467,479;499,506,502,510,507,516;499,502,497,509,498,509",
    "510,500,497,505,500,500;510,503,493,503,499,499;600,589,580,610,603,594;450,461,454,471,464,480;499,504,498,509,505,516;499,498,497,507,497,511",
    "513,499,497,506,499,501;510,505,495,502,500,499;601,590,580,611,606,595;451,460,455,470,465,479;500,505,500,510,505,514;498,500,496,508,497,509",
    "511,497,495,502,499,501;509,504,493,498,497,495;599,589,578,609,603,592;448,458,453,468,463,477;498,504,498,508,503,514;496,498,495,506,495,508",
    "513,501,499,505,499,502;511,506,496,503,501,500;601,590,580,610,604,596;452,461,455,470,466,481;501,506,501,510,506,516;499,501,497,509,498,510",
    "512,499,497,506,500,502;510,505,495,502,499,498;600,590,580,610,604,595;450,460,455,470,465,480;500,505,500,510,505,515;498,500,496,508,497,510",
    "511,500,498,506,499,501;510,505,495,502,500,499;600,590,580,610,605,595;451,460,455,470,465,479;500,505,500,510,505,514;498,500,496,508,497,509",
    "513,501,499,506,500,502;511,506,496,503,501,499;601,591,581,611,606,596;451,461,456,471,466,481;501,506,501,511,506,516;499,501,497,509,498,511",
    "514,502,500,507,501,503;512,507,497,504,502,500;602,592,582,612,607,597;452,462,457,472,467,482;502,507,502,512,507,517;500,502,498,510,499,512",
    "513,501,499,506,500,502;511,506,496,503,501,499;601,591,581,611,606,596;451,461,456,471,466,481;501,506,501,511,506,516;499,501,497,509,498,511",
    "512,500,498,505,499,501;510,505,495,502,500,498;600,590,580,610,605,595;450,460,455,470,465,480;500,505,500,510,505,515;498,500,496,508,497,510",
    "513,501,499,506,500,502;511,506,496,503,501,499;601,591,581,611,606,596;451,461,456,471,466,481;501,506,501,511,506,516;499,501,497,509,498,511",
    "514,502,500,507,501,503;512,507,497,504,502,500;602,592,582,612,607,597;452,462,457,472,467,482;502,507,502,512,507,517;500,502,498,510,499,512",
    "513,501,499,506,500,502;511,506,496,503,501,499;601,591,581,611,606,596;451,461,456,471,466,481;501,506,501,511,506,516;499,501,497,509,498,511",
    "512,500,498,505,499,501;510,505,495,502,500,498;600,590,580,610,605,595;450,460,455,470,465,480;500,505,500,510,505,515;498,500,496,508,497,510",
    "513,501,499,506,500,502;511,506,496,503,501,499;601,591,581,611,606,596;451,461,456,471,466,481;501,506,501,511,506,516;499,501,497,509,498,511",
    "514,502,500,507,501,503;512,507,497,504,502,500;602,592,582,612,607,597;452,462,457,472,467,482;502,507,502,512,507,517;500,502,498,510,499,512",
    "513,501,499,506,500,502;511,506,496,503,501,499;601,591,581,611,606,596;451,461,456,471,466,481;501,506,501,511,506,516;499,501,497,509,498,511",
    "512,500,498,505,499,501;510,505,495,502,500,498;600,590,580,610,605,595;450,460,455,470,465,480;500,505,500,510,505,515;498,500,496,508,497,510",
    "513,501,499,506,500,502;511,506,496,503,501,499;601,591,581,611,606,596;451,461,456,471,466,481;501,506,501,511,506,516;499,501,497,509,498,511",
    "514,502,500,507,501,503;512,507,497,504,502,500;602,592,582,612,607,597;452,462,457,472,467,482;502,507,502,512,507,517;500,502,498,510,499,512",
    "513,501,499,506,500,502;511,506,496,503,501,499;601,591,581,611,606,596;451,461,456,471,466,481;501,506,501,511,506,516;499,501,497,509,498,511",
    "512,500,498,505,499,501;510,505,495,502,500,498;600,590,580,610,605,595;450,460,455,470,465,480;500,505,500,510,505,515;498,500,496,508,497,510",
    "513,501,499,506,500,502;511,506,496,503,501,499;601,591,581,611,606,596;451,461,456,471,466,481;501,506,501,511,506,516;499,501,497,509,498,511"
]


valores = {
    x: {
        'media': [],
        'mediana': [],
        'mayor': [],
        'menor': [],
        'moda': [],
        'base': []
    } for x in range(6)
}

metricas = ['media', 'mediana', 'mayor', 'menor', 'moda', 'base']
desviacion = np.zeros(shape=(6, 6))
for d in data:
    secciones = d.split(';')
    for i in range(6):
        seccion = list(map(int, secciones[i].split(',')))
        for j in range(6):
            valores[j][metricas[i]].append(seccion[j])

for i in range(6):
    print(f'Pin {i+1}: ')
    for j in range(6):
        desviacion[i][j] = np.std(valores[j][metricas[i]])
        print(f'{metricas[j]}: {np.std(valores[i][metricas[j]])}')

df = pd.DataFrame(desviacion).T
df.columns = ['Media', 'Mediana', 'Mayor', 'Menor', 'Moda', 'Base']
print(df)

print('Debug')